{"version":3,"file":"scripts.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA,sDAAsD,WAAW;AACjE,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;UCzDvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA;AACwC;AACxC;AACA,oBAAoB,wDAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://scripts/webpack/universalModuleDefinition","webpack://scripts/./public/src/ts/modules/Notepad.ts","webpack://scripts/webpack/bootstrap","webpack://scripts/webpack/runtime/define property getters","webpack://scripts/webpack/runtime/hasOwnProperty shorthand","webpack://scripts/webpack/runtime/make namespace object","webpack://scripts/./public/src/ts/scripts.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scripts\"] = factory();\n\telse\n\t\troot[\"scripts\"] = factory();\n})(self, () => {\nreturn ","const Notepad = class {\n    // COnstructor method\n    constructor() {\n        this.storage = window.localStorage;\n        this.table = document.querySelector(\".table\");\n        // Check local storage\n        if (!this.storage.getItem(\"notes\"))\n            this.storage.setItem(\"notes\", JSON.stringify([]));\n        // Retrieve notes\n        this.notes = JSON.parse(this.storage.getItem(\"notes\"));\n        // Call the read method\n        this.read();\n    }\n    // Create note\n    create() {\n        // TODO\n    }\n    // Read note\n    read() {\n        // Reset the table\n        this.table.querySelector(\"tbody\").innerHTML = \"\";\n        this.table.querySelector(\"tfoot\").style.display = \"none\";\n        // Loop Notes\n        for (let note of this.notes) {\n            // Create tr\n            const tr = document.createElement(\"tr\");\n            // Update tbody with the new tr\n            this.table.querySelector(\"tbody\").appendChild(tr);\n            // Update the tr content\n            tr.innerHTML = `\r\n            <td>${note[\"title\"]}</td>\r\n            <td>\r\n                <a href=\"#\" class=\"update\" data-id=\"${note[\"id\"]}\"><i class=\"fa-solid fa-pen-to-square green\"></i></a>\r\n                <a href=\"#\" class=\"delete\" data-id=\"${note[\"id\"]}\"><i class=\"fa-solid fa-trash-can red\"></i></a>\r\n            </td>\r\n            `;\n        }\n        // Check notes\n        if (this.notes.length == 0)\n            this.table.querySelector(\"tfoot\").style.display = \"block\";\n    }\n    // Update note\n    update() {\n        // TODO\n    }\n    // Delete note\n    delete() {\n        // TODO\n    }\n    // Clean notes\n    clean() {\n        this.storage.setItem(\"notes\", JSON.stringify([]));\n        this.notes = JSON.parse(this.storage.getItem(\"notes\"));\n        this.table.querySelector(\"tbody\").innerHTML = \"\";\n        this.table.querySelector(\"tfoot\").style.display = \"block\";\n    }\n};\nexport default Notepad;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Dependencies\nimport Notepad from \"./modules/Notepad\";\n// Create Object\nconst notepad = new Notepad();\n// Create Note\nconst createForm = document.querySelector(\"#create-note\");\ncreateForm.onsubmit = () => {\n    // Fetch form requirement\n    const title = createForm.querySelector(\"input[name=title]\").value;\n    const note = createForm.querySelector(\"textarea[name=note]\").value;\n    // Retrieve last ID\n    const lastID = notepad.notes.length;\n    // Add note to notes property\n    notepad.notes.push({\n        id: lastID + 1,\n        title: title,\n        note: note\n    });\n    // Add note to notes storage\n    notepad.storage.setItem('notes', JSON.stringify(notepad.notes));\n    // Reset the form\n    createForm.reset();\n    // Call read method\n    notepad.read();\n    // Call update function\n    updateNote();\n    // Call delete function\n    deleteNote();\n    // Prevent default form behavior\n    return false;\n};\n// Update note\nconst updateNote = () => {\n    const updates = document.querySelectorAll(\".update\");\n    updates.forEach((elem) => {\n        elem.onclick = () => {\n            // Retrieve note ID\n            const ID = elem.dataset.id;\n            let note;\n            // Show modal\n            const modal = document.querySelector('.overlay');\n            modal.classList.remove('hide');\n            // Fetch clicked note data\n            notepad.notes.forEach((elem) => {\n                if (elem['id'] == ID)\n                    note = elem;\n            });\n            // Find note index: Refrence: https://stackoverflow.com/questions/30114829/find-index-of-array-element-in-another-array-javascript\n            const index = notepad.notes.indexOf(note);\n            // TODO: Update modal form with clicked note info\n            const form = modal.querySelector(\".form\");\n            form.querySelector(\"input[name=id]\").value = ID;\n            form.querySelector(\"input[name=title]\").value = note['title'];\n            form.querySelector(\"textarea[name=note]\").value = note['note'];\n            // Update Note Form\n            const updateForm = document.querySelector(\"#update-note\");\n            updateForm.onsubmit = () => {\n                // Fetch form requirement\n                const title = updateForm.querySelector(\"input[name=title]\").value;\n                const note = updateForm.querySelector(\"textarea[name=note]\").value;\n                // Update the notes\n                notepad.notes[index] = {\n                    id: ID,\n                    title: title,\n                    note: note\n                };\n                notepad.storage.setItem('notes', JSON.stringify(notepad.notes));\n                // Call read method\n                notepad.read();\n                // Call update function\n                updateNote();\n                // Call delete function\n                deleteNote();\n                // Prevent default form behavior\n                return false;\n            };\n            // Call read method\n            notepad.read();\n            // Call delete function\n            deleteNote();\n            // Method recursion\n            updateNote();\n        };\n    });\n};\n// Initial load\nupdateNote();\n// Delete Note\nconst deleteNote = () => {\n    const deletes = document.querySelectorAll(\".delete\");\n    deletes.forEach((elem) => {\n        elem.onclick = () => {\n            // Retrieve note ID\n            const ID = elem.dataset.id;\n            // Create a new array without the deleted note\n            let newNotes = [];\n            notepad.notes.forEach((note) => {\n                if (note['id'] != ID)\n                    newNotes.push(note);\n            });\n            // Set the notes storage and notes preperty to the new notes\n            notepad.notes = newNotes;\n            notepad.storage.setItem('notes', JSON.stringify(newNotes));\n            // Call read method\n            notepad.read();\n            // Call update function\n            updateNote();\n            // Method recursion\n            deleteNote();\n        };\n    });\n};\n// Initial call\ndeleteNote();\n// Clean Notes\nconst clean = document.querySelector(\"#clean\");\nclean.onclick = () => {\n    notepad.clean();\n};\n// Close modal\nconst close = document.querySelector('.close');\nclose.onclick = () => {\n    const modal = document.querySelector('.overlay');\n    modal.classList.add('hide');\n};\n"],"names":[],"sourceRoot":""}